// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ocp-howto-api.proto

package ocp_howto_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateHowtoV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateHowtoV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHowtoV1RequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateHowtoV1RequestValidationError is the validation error returned by
// CreateHowtoV1Request.Validate if the designated constraints aren't met.
type CreateHowtoV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHowtoV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHowtoV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHowtoV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHowtoV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHowtoV1RequestValidationError) ErrorName() string {
	return "CreateHowtoV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHowtoV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHowtoV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHowtoV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHowtoV1RequestValidationError{}

// Validate checks the field values on CreateHowtoV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateHowtoV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateHowtoV1ResponseValidationError is the validation error returned by
// CreateHowtoV1Response.Validate if the designated constraints aren't met.
type CreateHowtoV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHowtoV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHowtoV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHowtoV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHowtoV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHowtoV1ResponseValidationError) ErrorName() string {
	return "CreateHowtoV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHowtoV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHowtoV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHowtoV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHowtoV1ResponseValidationError{}

// Validate checks the field values on MultiCreateHowtoV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateHowtoV1Request) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetParams() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateHowtoV1RequestValidationError{
					field:  fmt.Sprintf("Params[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateHowtoV1RequestValidationError is the validation error returned by
// MultiCreateHowtoV1Request.Validate if the designated constraints aren't met.
type MultiCreateHowtoV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateHowtoV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateHowtoV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateHowtoV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateHowtoV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateHowtoV1RequestValidationError) ErrorName() string {
	return "MultiCreateHowtoV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateHowtoV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateHowtoV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateHowtoV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateHowtoV1RequestValidationError{}

// Validate checks the field values on MultiCreateHowtoV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateHowtoV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MultiCreateHowtoV1ResponseValidationError is the validation error returned
// by MultiCreateHowtoV1Response.Validate if the designated constraints aren't met.
type MultiCreateHowtoV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateHowtoV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateHowtoV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateHowtoV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateHowtoV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateHowtoV1ResponseValidationError) ErrorName() string {
	return "MultiCreateHowtoV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateHowtoV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateHowtoV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateHowtoV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateHowtoV1ResponseValidationError{}

// Validate checks the field values on UpdateHowtoV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateHowtoV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetHowto()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateHowtoV1RequestValidationError{
				field:  "Howto",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateHowtoV1RequestValidationError is the validation error returned by
// UpdateHowtoV1Request.Validate if the designated constraints aren't met.
type UpdateHowtoV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHowtoV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHowtoV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHowtoV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHowtoV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHowtoV1RequestValidationError) ErrorName() string {
	return "UpdateHowtoV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHowtoV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHowtoV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHowtoV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHowtoV1RequestValidationError{}

// Validate checks the field values on UpdateHowtoV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateHowtoV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateHowtoV1ResponseValidationError is the validation error returned by
// UpdateHowtoV1Response.Validate if the designated constraints aren't met.
type UpdateHowtoV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHowtoV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHowtoV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHowtoV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHowtoV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHowtoV1ResponseValidationError) ErrorName() string {
	return "UpdateHowtoV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHowtoV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHowtoV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHowtoV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHowtoV1ResponseValidationError{}

// Validate checks the field values on DescribeHowtoV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeHowtoV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DescribeHowtoV1RequestValidationError is the validation error returned by
// DescribeHowtoV1Request.Validate if the designated constraints aren't met.
type DescribeHowtoV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeHowtoV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeHowtoV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeHowtoV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeHowtoV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeHowtoV1RequestValidationError) ErrorName() string {
	return "DescribeHowtoV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeHowtoV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeHowtoV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeHowtoV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeHowtoV1RequestValidationError{}

// Validate checks the field values on DescribeHowtoV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeHowtoV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetHowto()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeHowtoV1ResponseValidationError{
				field:  "Howto",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeHowtoV1ResponseValidationError is the validation error returned by
// DescribeHowtoV1Response.Validate if the designated constraints aren't met.
type DescribeHowtoV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeHowtoV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeHowtoV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeHowtoV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeHowtoV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeHowtoV1ResponseValidationError) ErrorName() string {
	return "DescribeHowtoV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeHowtoV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeHowtoV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeHowtoV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeHowtoV1ResponseValidationError{}

// Validate checks the field values on ListHowtosV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListHowtosV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Offset

	// no validation rules for Count

	return nil
}

// ListHowtosV1RequestValidationError is the validation error returned by
// ListHowtosV1Request.Validate if the designated constraints aren't met.
type ListHowtosV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHowtosV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHowtosV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHowtosV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHowtosV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHowtosV1RequestValidationError) ErrorName() string {
	return "ListHowtosV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHowtosV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHowtosV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHowtosV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHowtosV1RequestValidationError{}

// Validate checks the field values on ListHowtosV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListHowtosV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetHowtos() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHowtosV1ResponseValidationError{
					field:  fmt.Sprintf("Howtos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListHowtosV1ResponseValidationError is the validation error returned by
// ListHowtosV1Response.Validate if the designated constraints aren't met.
type ListHowtosV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHowtosV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHowtosV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHowtosV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHowtosV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHowtosV1ResponseValidationError) ErrorName() string {
	return "ListHowtosV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHowtosV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHowtosV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHowtosV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHowtosV1ResponseValidationError{}

// Validate checks the field values on RemoveHowtoV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveHowtoV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// RemoveHowtoV1RequestValidationError is the validation error returned by
// RemoveHowtoV1Request.Validate if the designated constraints aren't met.
type RemoveHowtoV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHowtoV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHowtoV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHowtoV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHowtoV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHowtoV1RequestValidationError) ErrorName() string {
	return "RemoveHowtoV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHowtoV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHowtoV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHowtoV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHowtoV1RequestValidationError{}

// Validate checks the field values on RemoveHowtoV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveHowtoV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveHowtoV1ResponseValidationError is the validation error returned by
// RemoveHowtoV1Response.Validate if the designated constraints aren't met.
type RemoveHowtoV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHowtoV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHowtoV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHowtoV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHowtoV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHowtoV1ResponseValidationError) ErrorName() string {
	return "RemoveHowtoV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHowtoV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHowtoV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHowtoV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHowtoV1ResponseValidationError{}

// Validate checks the field values on HowtoParams with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HowtoParams) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CourseId

	// no validation rules for Question

	// no validation rules for Answer

	return nil
}

// HowtoParamsValidationError is the validation error returned by
// HowtoParams.Validate if the designated constraints aren't met.
type HowtoParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HowtoParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HowtoParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HowtoParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HowtoParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HowtoParamsValidationError) ErrorName() string { return "HowtoParamsValidationError" }

// Error satisfies the builtin error interface
func (e HowtoParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHowtoParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HowtoParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HowtoParamsValidationError{}

// Validate checks the field values on Howto with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Howto) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HowtoValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// HowtoValidationError is the validation error returned by Howto.Validate if
// the designated constraints aren't met.
type HowtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HowtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HowtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HowtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HowtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HowtoValidationError) ErrorName() string { return "HowtoValidationError" }

// Error satisfies the builtin error interface
func (e HowtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHowto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HowtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HowtoValidationError{}
